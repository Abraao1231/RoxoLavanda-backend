generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://public_oi0r_user:B9xyeAV8VIj8sAl8QpFq3VxrmvV7From@dpg-cptvpu9u0jms73egk140-a/public_oi0r"
  // provider = "sqlite"
  // url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  userName              String
  email                 String
  password              String
  created_at            DateTime
  genero                String
  altura                Float
  peso                  Float
  RegistroTreinoRealiza RegistroTreinoRealiza[]
  Treinos               Treino[]

  @@unique([id])
  @@unique([email])
  @@map("user")
}

model Treino {
  id                    String                  @id @default(uuid())
  intervalo             Int
  nome                  String
  userId                String
  diasDaSemana          String
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  RegistroTreinoRealiza RegistroTreinoRealiza[]
  TreinoPossuiExercicio TreinoPossuiExercicio[]

  @@map("treino")
}

model RegistroTreinoRealiza {
  id                   String              @id @default(uuid())
  tempo                Int
  data                 DateTime
  userId               String
  treinoId             String
  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  treino               Treino              @relation(fields: [treinoId], references: [id], onDelete: Cascade)
  exerciciosRealizados RegistroExercicio[]

  @@map("registra_treino_realiza")
}

model RegistroExercicio {
  id                      String                 @id @default(uuid())
  SeriesRealizadas        Int
  RegistroTreinoRealiza   RegistroTreinoRealiza? @relation(fields: [registroTreinoRealizaId], references: [id])
  treinoPossuiExercicioId String
  TreinoPossuiExercicio   TreinoPossuiExercicio? @relation(fields: [treinoPossuiExercicioId], references: [id])

  registroTreinoRealizaId String
}

model Exercicio {
  id                    String                  @id @default(uuid())
  nome                  String
  TreinoPossuiExercicio TreinoPossuiExercicio[]

  @@map("exercicio")
}

model TreinoPossuiExercicio {
  id                String              @id @default(uuid())
  numeroRep         Int
  intervalo         Int
  numeroSer         Int
  carga             Int
  treinoId          String
  treino            Treino              @relation(fields: [treinoId], references: [id], onDelete: Cascade)
  exercicioId       String
  exercicio         Exercicio           @relation(fields: [exercicioId], references: [id], onDelete: Cascade)
  RegistroExercicio RegistroExercicio[]

  @@map("treino_possui_exercicio")
}
